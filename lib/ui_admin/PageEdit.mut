

class PageEdit extends ui.View {

  robject page = none;
  /*var renderItemMap = {*/
  /*  common.PageItemType.HEADER: this.renderHeader,*/
  /*  common.PageItemType.PARAGRAPH: this.renderParagraph,*/
  /*  common.PageItemType.IMAGE: this.renderImage,*/
  /*  common.PageItemType.GALLERY: this.renderGallery,*/
  /*  common.PageItemType.VIDEO: this.renderVideo,*/
  /*  common.PageItemType.LINK: this.renderLink,*/
  /*  common.PageItemType.FILE: this.renderFile,*/
  /*};*/

  event eventAddHeader;
  event eventAddParagraph;
  event eventAddImage;
  event eventAddGallery;
  event eventAddVideo;
  event eventAddLink;
  event eventAddFile;

  () {
    super();
  }

  tag render() {
    return <div class=['page_edit']>
        <div class=['label']> 'СТРАНИЦА' </div>
        <div class=['title']> this.page.title </div>
        <div class=['items']> rmap(this.page.items, this.renderItem) </div>
        <div class=['buttons']>
          <div class=['add_header_button'] onclick=this.onAddHeaderButtonClick> 'ЗАГОЛОВОК' </div>
          <div class=['add_paragraph_button'] onclick=this.onAddParagraphButtonClick> 'ПАРАГРАФ' </div>
          <div class=['add_image_button'] onclick=this.onAddImageButtonClick> 'КАРТИНКА' </div>
          <div class=['add_gallery_button'] onclick=this.onAddGalleryButtonClick> 'ГАЛЕРЕЯ' </div>
          <div class=['add_video_button'] onclick=this.onAddVideoButtonClick> 'ВИДЕО' </div>
          <div class=['add_link_button'] onclick=this.onAddLinkButtonClick> 'ССЫЛКА' </div>
          <div class=['add_file_button'] onclick=this.onAddFileButtonClick> 'ФАИЛ' </div>
        </div>
      </div>;
  }

  tag renderHeader(robject item) {
    return <div class=['header']>
      item.content
    </div>;
  }

  tag renderParagraph(robject item) {
    return <div class=['paragraph']>
      item.content
    </div>;
  }

  tag renderImage(robject item) {
    return <div class=['image']>
      'image'
    </div>;
  }

  tag renderGallery(robject item) {
    return <div class=['gallery']>
      'gallery'
    </div>;
  }

  tag renderVideo(robject item) {
    return <div class=['video']>
      'video'
    </div>;
  }

  tag renderLink(robject item) {
    return <div class=['link']> 
      'link'
    </div>;
  }

  tag renderFile(robject item) {
    return <div class=['file']>
      'file'
    </div>;
  }

  tag renderItem(robject item) {
    /*var renderMethod = this.renderItemMap[item.kind];*/
    /*return renderMethod(item);*/
    if item.kind is common.PageItemType.HEADER { return this.renderHeader(item); }
    if item.kind is common.PageItemType.PARAGRAPH { return this.renderParagraph(item); }
    if item.kind is common.PageItemType.IMAGE { return this.renderImage(item); }
    if item.kind is common.PageItemType.GALLERY { return this.renderGallery(item); }
    if item.kind is common.PageItemType.VIDEO { return this.renderVideo(item); }
    if item.kind is common.PageItemType.LINK { return this.renderLink(item); }
    if item.kind is common.PageItemType.FILE { return this.renderFile(item); }
    console.log('renderItem kind unknown');
  }

  void addHeader(object bef) {
    var header = common.PageItem() {
      kind: common.PageItemType.HEADER,
      content: 'HEADER'
    };
    if bef isnot none {
      console.log('addHeader bef isnot none');
      insert this.page.items value header before bef;
    } else {
      console.log('addHeader bef is none');
      insert this.page.items value header;
    }
  }

  /*void addParagraph(object bef) {*/
  /*  console.log('not implemented');*/
  /*}*/

  /*void addImage(object bef) {*/
  /*  console.log('not implemented');*/
  /*}*/

  /*void addGallery(object bef) {*/
  /*  console.log('not implemented');*/
  /*}*/

  /*void addVideo(object bef) {*/
  /*  console.log('not implemented');*/
  /*}*/

  /*void addLink(object bef) {*/
  /*  console.log('not implemented');*/
  /*}*/

  /*void addFile(object bef) {*/
  /*  console.log('not implemented');*/
  /*}*/

  # events

  void onAddHeaderButtonClick(event e) {
    /*this.addHeader(none);*/
    this.eventAddHeader.notify(none);
  }

  void onAddParagraphButtonClick(event e) {
    /*this.addParagraph(none);*/
    this.eventAddParagraph.notify(none);
  }

  void onAddImageButtonClick(event e) {
    /*this.addImage(none);*/
    this.eventAddImage.notify(none);
  }

  void onAddGalleryButtonClick(event e) {
    /*this.addGallery(none);*/
    this.eventAddGallery.notify(none);
  }

  void onAddVideoButtonClick(event e) {
    /*this.addVideo(none);*/
    this.eventAddVideo.notify(none);
  }

  void onAddLinkButtonClick(event e) {
    /*this.addLink(none);*/
    this.eventAddLink.notify(none);
  }

  void onAddFileButtonClick(event e) {
    /*this.addFile(none);*/
    this.eventAddFile.notify(none);
  }

}

