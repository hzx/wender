

class MultiSlider extends View {

  int time = 3000;
  int bunch = 5;
  int padding = 3;
  bool isStarted = false;

  # calculated values
  # one slide width + space
  int delta = 0;
  # max slide num
  int maxNum = 0;
  # slides shift num count
  int numShift = 1;
  # current slide num
  int curr = 0;

  bool isNextButtonEnabled = false;
  bool isPrevButtonEnabled = false;

  () {
    super();
  }

  /*
  implement this
  tag render() {
    return <div class=['ui_multislider']>
      <div class=['slides_wrap']>
        <div class=['slides']> rmap(this.slides, this.renderSlide) </div>
      </div>
      <div class=['buttons']>
        <div class=['next_button'] onclick=this.onNextClick></div>
        <div class=['prev_button'] onclick=this.onPrevClick></div>
      </div>
    </div>;
  }
  tag renderSlide(robject slide) {
    return <div class=['slide']>
    </div>;
  }
  */

  void enterDocument() {
    super();

    if this.curr is 0 {
      this.initSizes(); 
      this.curr = 1;
    }
    this.setButtonsStates();
    this.setInitialPositions();

    this.unpauseSlides();
  }

  void exitDocument() {
    this.pauseSlides();

    super();
  }

  tag getFirstSlide() {
    # initialize first slide .ui_multislider > .slides_wrap > .slides > .slide
    return this.element.first.first.first;
  }

  tag getSlidesWrap() {
    return this.element.first;
  }

  tag getSlides() {
    return this.element.first.first;
  }

  tag getNextButton() {
    return this.element.last.first;
  }

  tag getPrevButton() {
    return this.element.last.last;
  }

  void initSizes() {
    # get slides
    tag slides = this.getSlidesWrap();
    int childsCount = slides.first.getChildsCount();
    # get first slide
    if (slides is none) or (childsCount is 0) {
      this.isNextButtonEnabled = false;
      this.isPrevButtonEnabled = false;
      return none;
    }
    tag firstSlide = this.getFirstSlide();
    # get slides width
    int width = parseInt(slides.getStyle('width'), 10) - this.padding;
    # get child width
    int slideWidth = parseInt(firstSlide.getStyle('width'), 10);
    # calculate slide space value
    int slideSpace = parseInt((width - slideWidth * this.bunch) / (this.bunch - 1), 10);
    
    # set calcualtes values
    this.delta = slideWidth + slideSpace;
    this.maxNum = childsCount;
    this.numShift = this.bunch - 1;
  }

  void setEnabledNextButton(bool isEnabled) {
    tag nextButton = this.getNextButton();
    if isEnabled {
      nextButton.removeClass('disabled');
    } else {
      nextButton.addClass('disabled');
    }
    this.isNextButtonEnabled = isEnabled;
  }

  void setEnabledPrevButton(bool isEnabled) {
    tag prevButton = this.getPrevButton();
    if isEnabled {
      prevButton.removeClass('disabled');
    } else {
      prevButton.addClass('disabled');
    }
    this.isPrevButtonEnabled = isEnabled;
  }

  void setInitialPositions() {
    int left = 0;
    tag cursor = this.getFirstSlide();
    while cursor isnot none {
      cursor.setStyle('left', left + 'px');
      left = left + this.delta;
      cursor = cursor.next;
    }
  }

  void setButtonsStates() {
    this.setEnabledNextButton((this.curr + this.numShift) < this.maxNum);
    this.setEnabledPrevButton(this.curr > 1);
  }


  void moveNext() {
    if not this.isNextButtonEnabled { return none; }

    tag slides = this.getSlides();
    int next = this.curr + this.numShift;
    if next > (this.maxNum - this.numShift) {
      next = this.maxNum - this.numShift;
    }
    this.curr = next;
    int left = 0 - (this.curr - 1) * this.delta;
    slides.setStyle('left', left + 'px');

    this.setButtonsStates();
  }

  void movePrev() {
    if not this.isPrevButtonEnabled { return none; }

    tag slides = this.getSlides();
    int prev = this.curr - this.numShift;
    if prev < 1 { prev = 1; }
    this.curr = prev;
    int left = 0 - (this.curr - 1) * this.delta;
    slides.setStyle('left', left + 'px');

    this.setButtonsStates();
  }

  void pauseSlides() {
    if (not this.isStarted) or this.isDisabled { return none; }

    browser.removeRender(this.moveNext);
  }

  void unpauseSlides() {
    if (not this.isStarted) or this.isDisabled { return none; }

    browser.addRender(this.moveNext, this.slideTime);
  }

  # events

  void onNextClick(event e) {
    this.moveNext();
  }

  void onPrevClick(event e) {
    this.movePrev();
  }

  void onSlideMouseover(event e) {
    this.pauseSlides();
  }

  void onSlideMouseout(event e) {
    this.unpauseSlides();
  }

}
