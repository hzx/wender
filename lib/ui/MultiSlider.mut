

class MultiSlider extends View {

  int slideTime = 3000;
  int slidesCount = 5;
  int slidesDelta = 3;

  int slidesWidth = 0;
  int slideWidth = 0;

  bool isStarted = false;
  bool isDisabled = false;
  tag currentSlide = none;

  () {
    super();
  }

  /*
  implement this
  tag render() {
    return <div class=['ui_multislider']>
      <div class=['slides']>
        rmap(this.slides, this.renderSlide)
      </div>
      <div class=['buttons']>
        <div class=['next_button'] onclick=this.onNextClick></div>
        <div class=['prev_button'] onclick=this.onPrevClick></div>
      </div>
    </div>;
  }
  tag renderSlide(robject slide) {
    return <div class=['slide']>
    </div>;
  }
  */

  void enterDocument() {
    super();

    this.initSizes();

    /*if currentSlide is none {*/
    /*}*/
    this.checkSlides();

    # initialize first slide .ui_multislider > .slides > .slide
    if this.currentSlide is none {
      this.initSizes();
    }
    this.setSlideCurrent(this.element.first.first);

    this.unpauseSlides();
  }

  void exitDocument() {
    this.pauseSlides();

    super();
  }

  void initSizes() {
    # get slides
    tag slides = this.element.first;
    # get first slide
    if slides is none {
      return none;
    }
    int childsCount = slides.getChildsCount();
    if childsCount is 0 {
      return none;
    }
    tag firstSlide = slides.first;
    # get slides width
    int slidesWidth = parseInt(slides.getStyle('width'), 10) - this.slidesDelta;
    # get child width
    int slideWidth = parseInt(firstSlide.getStyle('width'), 10);
    # calculate slide space value
    float slideSpace = (slidesWidth - slideWidth * this.slidesCount) / (this.slidesCount - 1);
    this.slidesWidth = slidesWidth;
    this.slideWidth = slideWidth;
    this.slideSpace = parseInt(slideSpace, 10);
  }

  void checkSlides() {
    # .ui_multislider > .slides
    tag slides = this.element.first;

    # slides <= slidesCount then disable slider
  }

  void setSlideCurrent(tag slide) {
    if slide is none { return none; }
    int counter = 0;
    int leftPos = 0;
    var cursor = slide;
    this.currentSlide = slide;
    while (cursor isnot none) {
      # set current slide position
      cursor.setStyle('left', leftPos + 'px');

      counter = counter + 1;
      # move position to next slide
      leftPos = leftPos + this.slideSpace + this.slideWidth;
      cursor = cursor.next;
    }
  }

  void moveNext() {
    if this.isDisabled { return none; }

    # move to next slidesCount-1
    int counter = 0;
    int maxCounter = this.slidesCount - 1;
    var cursor = this.currentSlide;
    tag currentSlide = none;
    while (cursor isnot none) and (counter < maxCounter) {
      counter = counter + 1;
      cursor = cursor.next;
      if cursor isnot none {
        currentSlide = cursor;
      }
    }
    this.setSlideCurrent(currentSlide);
  }

  void movePrev() {
    if this.isDisabled { return none; }

    # move to prev slidesCount-1
    int counter = 0;
    int maxCounter = this.slidesCount - 1;
    var cursor = this.currentSlide;
    tag currentSlide = none;
    while (cursor isnot none) and (counter < maxCounter) {
      counter = counter + 1;
      cursor = cursor.prev;
      if cursor isnot none {
        currentSlide = cursor;
      }
    }
    this.setSlideCurrent(cursor);
  }

  void pauseSlides() {
    if (not this.isStarted) or this.isDisabled { return none; }

    browser.removeRender(this.moveNext);
  }

  void unpauseSlides() {
    if (not this.isStarted) or this.isDisabled { return none; }

    browser.addRender(this.moveNext, this.slideTime);
  }

  # events

  void onNextClick(event e) {
    this.moveNext();
  }

  void onPrevClick(event e) {
    this.movePrev();
  }

  void onSlideMouseover(event e) {
    this.pauseSlides();
  }

  void onSlideMouseout(event e) {
    this.unpauseSlides();
  }

}
