

class EventHandler {

  var observable = none;
  var handler = none;

  (var observable, var handler) {
    this.observable = observable;
    this.handler = handler;
  }

}

/*
View is DomElement wrapper, behavior like DomElement, but consists
of tag structure and behavior.
*/
class View {
  # View members
  tag element = none;

  # DomNode implementation members
  tag parent = none;
  tag next = none;
  tag prev = none;
  string hash = none;
  bool isInDocument = false;
  var obj = none;

  var events = [];

  # DomElement wrap methods

  void addEvent(var observable, var handler) {
    this.events.add(EventHandler(observable, handler));
  }

  void getNode() {
    return this.element.getNode();
  }

  string getHash() {
    return this.element.getHash();
  }

  void insert(tag node) {
    this.element.insert(node);
  }

  void append(tag node) {
    this.element.append(node);
  }

  void insertBefore(tag node, tag before) {
    this.element.insertBefore(node, before);
  }

  void insertAfter(tag node, tag after) {
    this.element.insertAfter(node, after);
  }

  void remove() {
    this.element.remove();
  }

  void enterDocument() {
    this.element.enterDocument();
  }

  void exitDocument() {
    this.element.exitDocument();
  }

  # View methods

  bool tryEnterDocument() {
    if this.isInDocument {
      return false;
    }
    this.isInDocument = true;
    return true;
  }

  bool tryExitDocument() {
    if this.isInDocument is false {
      return false;
    }
    this.isInDocument = false;
    return true;
  }

  void addToDocument(var parent) {
    parent.append(this.element);
    this.enterDocument();
  }

  void removeFromDocument() {
    this.exitDocument();
    this.element.remove();
  }

}
