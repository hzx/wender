

/*
View is DomElement wrapper, behavior like DomElement, but consists
of tag structure and behavior.
*/
class View {
  # View members
  tag element = none;

  string id = null;

  # DomNode implementation members
  tag parent = none;
  tag next = none;
  tag prev = none;
  string hash = none;
  bool isInDocument = false;
  object obj = none;

  object[] events = [];

  # DomElement wrap methods

  void registerId() {
    if this.id isnot none {
      browser.addIdElement(this.id, this)
    }
  }

  void unregisterId() {
    if this.id isnot none {
      browser.removeIdElement(this.id)
    }
  }

  void addEvent(object observable, object handler) {
    var link = [observable, handler];
    this.events.push(link);
  }

  void getNode() {
    return this.element.getNode();
  }

  string getHash() {
    return this.element.getHash();
  }

  void insert(tag node) {
    this.element.insert(node);
  }

  void append(tag node) {
    this.element.append(node);
  }

  void insertBefore(tag node, tag before) {
    this.element.insertBefore(node, before);
  }

  void insertAfter(tag node, tag after) {
    this.element.insertAfter(node, after);
  }

  void remove() {
    this.parent.removeChild(this);
  }

  void enterDocument() {
    this.element.enterDocument();
    this.registerId();

    for ev in this.events {
      var observable = ev[0];
      var handler = ev[1];
      observable.addListener(handler);
    }
  }

  void exitDocument() {
    for ev in this.events {
      var observable = ev[0];
      var handler = ev[1];
      observable.removeListener(handler);
    }

    this.unregisterId();
    this.element.exitDocument();
  }

  # View methods

  bool tryEnterDocument() {
    if this.isInDocument {
      return false;
    }
    this.isInDocument = true;
    return true;
  }

  bool tryExitDocument() {
    if this.isInDocument is false {
      return false;
    }
    this.isInDocument = false;
    return true;
  }

}
