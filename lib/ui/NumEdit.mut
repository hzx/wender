
class NumEdit extends View {
  string id = none;
  var value = none;
  string uiclass = '';

  () {
    super();
  }

  tag render() {
    return <div class=['ui_numedit', this.uiclass] onclick=this.onClick>
      <div class=['minus'] onclick=this.onMinusClick></div>
      <div class=['plus'] onclick=this.onPlusClick></div>
      <div class=['bg']></div>
      <div class=['wrap']>
        <input class=['edit'] value=this.value.value onkeyup=this.onKeyup onfocus=this.onFocus onblur=this.onBlur/>
      </div>
    </div>;
  }

  void enterDocument() {
    super();
    this.value.addListener(this.onValueChange);
  }

  void exitDocument() {
    this.value.removeListener(this.onValueChange);
    super();
  }

  void focus() {
    this.element.last.first.node.focus();
  }

  void onValueChange(string old, string cur) {
    this.element.last.first.node.value = cur;
  }

  void onKeyup(event e) {
    var val = wender.parseInt(e.element.node.value);
    e.element.node.value = val;
    this.value.setValue(val);
  }

  bool onFocus(event e) {
    this.element.addClass('active');
    this.focus();
  }

  bool onBlur(event e) {
    this.element.removeClass('active');
  }

  bool onClick(event e) {
    this.focus();
    return false;
  }

  bool onMinusClick(event e) {
    var val = wender.parseInt(this.value.value);
    if val is 0 {
      return false;
    }
    val = val - 1;
    this.value.setValue(val);
    return false;
  }

  bool onPlusClick(event e) {
    var val = wender.parseInt(this.value.value);
    val = val + 1;
    this.value.setValue(val);
    return false;
  }
}
