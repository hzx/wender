
class SelectEdit extends View {
  string id = none;
  var value = none;
  string uiclass = '';

  string text = '';

  event eventChange;
  event eventSelect;

  () {
    super();
  }

  tag render() {
    return <div class=['ui_select_edit', this.uiclass] onclick=this.onClick>
      <div class=['label']> this.value </div>
      <div class=['wrap']>
        <input class=['edit'] value=this.value.value onkeyup=this.onKeyup onfocus=this.onFocus onblur=this.onBlur/>
      </div>
    </div>;
  }

  void enterDocument() {
    super();
    this.setValue(this.value.value);
    this.value.addListener(this.onValueChange);
  }

  void exitDocument() {
    this.value.removeListener(this.onValueChange);
    super();
  }

  void focus() {
    this.element.last.first.node.focus();
  }

  bool isSelected() {
    return this.element.hasClass('selected');
  }

  void setSelected(bool flag) {
    if flag {
      this.element.addClass('selected');
    } else {
      this.element.removeClass('selected');
    }
  }

  void setValue(string val) {
    this.text = val;
    this.element.first.setText(val);
    this.element.last.first.node.value = val;
  }

  void onValueChange(string old, string cur) {
    this.setValue(cur);
  }

  bool onKeyup(event e) {
    var rawval = e.element.node.value;
    var val = wender.trimString(rawval);
    if val.length > 0 {
      this.text = rawval;
    }
  }

  bool onFocus(event e) {
    this.focus();
  }

  bool onBlur(event e) {
    this.element.removeClass('active');

    var oldval = wender.trimString(this.value.value);
    var cur = wender.trimString(this.text);

    if oldval isnot cur {
      this.value.setValue(cur);
      this.eventChange.notify(this.value);
    }
  }

  bool onClick(event e) {
    if this.isSelected() {
      if not this.element.hasClass('active') {
        this.element.addClass('active');
        this.focus();
      }
    } else {
      this.setSelected(true);
      this.eventSelect.notify(this);
    }
  }
 }
