
class Edit extends View {
  string id = none;
  var value = none;
  string uiclass = '';

  string text = '';

  event eventChange;

  () {
    super();
  }

  tag render() {
    return <div class=['ui_edit', this.uiclass] onclick=this.onClick>
      <div class=['wrap']>
        <input class=['edit'] value=this.value.value onkeyup=this.onKeyup onfocus=this.onFocus onblur=this.onBlur/>
      </div>
    </div>;
  }

  void enterDocument() {
    super();
    this.setValue(this.value.value);
    this.value.addListener(this.onValueChange);
  }

  void exitDocument() {
    this.value.removeListener(this.onValueChange);
    super();
  }

  void focus() {
    this.element.first.first.node.focus();
  }

  void setValue(string val) {
    this.text = val;
    this.element.first.first.node.value = val;
  }

  void onValueChange(string old, string cur) {
    this.setValue(cur);
  }

  bool onKeyup(event e) {
    var rawval = e.element.node.value;
    var val = wender.trimString(rawval);
    if val.length > 0 {
      /* this.value.setValue(rawval); */
      this.text = rawval;
    }
  }

  bool onFocus(event e) {
    this.element.addClass('active');
    this.focus();
  }

  bool onBlur(event e) {
    this.element.removeClass('active');

    var oldval = wender.trimString(this.value.value);
    var cur = wender.trimString(this.text);

    if oldval isnot cur {
      this.value.setValue(cur);
      this.eventChange.notify(this.value);
    }
  }

  bool onClick(event e) {
    this.focus();
    return false;
  }
}
