// Generated by CoffeeScript 1.4.0
(function() {

  ns.Browser = (function() {

    function Browser() {
      this.ids = {};
      this.body = new ns.DomElement('div', {}, [], null, null);
      this.body.node = document.body;
    }

    Browser.prototype.loadScript = function(url, callback) {
      var script;
      script = document.createElement("script");
      script.type = "text/javascript";
      if (script.readyState) {
        script.onreadystatechange = function() {
          if (script.readyState === "loaded" || script.readyState === "complete") {
            script.onreadystatechange = null;
            return callback();
          }
        };
      } else {
        script.onload = function() {
          return callback();
        };
      }
      script.src = url;
      return document.getElementsByTagName("head")[0].appendChild(script);
    };

    Browser.prototype.loadCss = function(url) {
      var link;
      link = document.createElement('link');
      link.type = "text/css";
      link.rel = "stylesheet";
      link.href = url;
      return document.getElementsByTagName("head")[0].appendChild(link);
    };

    Browser.prototype.getElementById = function(id) {
      if (id in this.ids) {
        return this.ids[id];
      } else {
        return null;
      }
    };

    Browser.prototype.addIdElement = function(id, element) {
      if (id in this.ids) {
        throw 'element with id "#{id}" already exists';
      }
      return this.ids[id] = element;
    };

    Browser.prototype.removeIdElement = function(id) {
      if (!(id in this.ids)) {
        throw 'element with id "#{id}" not exists';
      }
      return delete this.ids[id];
    };

    Browser.prototype.setTitle = function(text) {
      return window.title = text;
    };

    Browser.prototype.appendElement = function(element) {
      this.body.append(element);
      return element.enterDocument();
    };

    Browser.prototype.removeElement = function(element) {
      element.exitDocument();
      return this.body.removeChild(element);
    };

    Browser.prototype.addTimeoutWork = function(work, time) {
      var id;
      id = window.setTimeout(work, time);
      return work.hash = id;
    };

    Browser.prototype.removeTimeoutWork = function(work) {
      window.clearTimeout(work.hash);
      return delete work.hash;
    };

    Browser.prototype.addRender = function(render, time) {
      var id;
      id = window.setInterval(render, time);
      return render.hash = id;
    };

    Browser.prototype.removeRender = function(render) {
      window.clearInterval(render.hash);
      return delete render.hash;
    };

    return Browser;

  })();

}).call(this);
